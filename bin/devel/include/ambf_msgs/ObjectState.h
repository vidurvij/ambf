// Generated by gencpp from file ambf_msgs/ObjectState.msg
// DO NOT EDIT!


#ifndef AMBF_MSGS_MESSAGE_OBJECTSTATE_H
#define AMBF_MSGS_MESSAGE_OBJECTSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <std_msgs/String.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Wrench.h>

namespace ambf_msgs
{
template <class ContainerAllocator>
struct ObjectState_
{
  typedef ObjectState_<ContainerAllocator> Type;

  ObjectState_()
    : header()
    , sim_step(0)
    , name()
    , wall_time(0.0)
    , sim_time(0.0)
    , mass(0.0)
    , pInertia()
    , pose()
    , wrench()
    , userdata_description()
    , children_names()
    , joint_names()
    , userdata()
    , joint_positions()  {
    }
  ObjectState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sim_step(0)
    , name(_alloc)
    , wall_time(0.0)
    , sim_time(0.0)
    , mass(0.0)
    , pInertia(_alloc)
    , pose(_alloc)
    , wrench(_alloc)
    , userdata_description(_alloc)
    , children_names(_alloc)
    , joint_names(_alloc)
    , userdata(_alloc)
    , joint_positions(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _sim_step_type;
  _sim_step_type sim_step;

   typedef  ::std_msgs::String_<ContainerAllocator>  _name_type;
  _name_type name;

   typedef float _wall_time_type;
  _wall_time_type wall_time;

   typedef float _sim_time_type;
  _sim_time_type sim_time;

   typedef float _mass_type;
  _mass_type mass;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pInertia_type;
  _pInertia_type pInertia;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::geometry_msgs::Wrench_<ContainerAllocator>  _wrench_type;
  _wrench_type wrench;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _userdata_description_type;
  _userdata_description_type userdata_description;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _children_names_type;
  _children_names_type children_names;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _joint_names_type;
  _joint_names_type joint_names;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _userdata_type;
  _userdata_type userdata;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _joint_positions_type;
  _joint_positions_type joint_positions;





  typedef boost::shared_ptr< ::ambf_msgs::ObjectState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ambf_msgs::ObjectState_<ContainerAllocator> const> ConstPtr;

}; // struct ObjectState_

typedef ::ambf_msgs::ObjectState_<std::allocator<void> > ObjectState;

typedef boost::shared_ptr< ::ambf_msgs::ObjectState > ObjectStatePtr;
typedef boost::shared_ptr< ::ambf_msgs::ObjectState const> ObjectStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ambf_msgs::ObjectState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ambf_msgs::ObjectState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ambf_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'ambf_msgs': ['/home/vidur/Desktop/ambf/ambf_ros_modules/ambf_msgs/msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ambf_msgs::ObjectState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ambf_msgs::ObjectState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ambf_msgs::ObjectState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ambf_msgs::ObjectState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ambf_msgs::ObjectState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ambf_msgs::ObjectState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ambf_msgs::ObjectState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c41957ade5befe08be9e8f0ca23c5c4";
  }

  static const char* value(const ::ambf_msgs::ObjectState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c41957ade5befe0ULL;
  static const uint64_t static_value2 = 0x8be9e8f0ca23c5c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::ambf_msgs::ObjectState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ambf_msgs/ObjectState";
  }

  static const char* value(const ::ambf_msgs::ObjectState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ambf_msgs::ObjectState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
uint32 sim_step\n\
std_msgs/String name\n\
float32 wall_time\n\
float32 sim_time\n\
float32 mass\n\
geometry_msgs/Point pInertia\n\
geometry_msgs/Pose pose\n\
geometry_msgs/Wrench wrench\n\
string userdata_description\n\
string[] children_names\n\
string[] joint_names\n\
float32[] userdata\n\
float32[] joint_positions\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Wrench\n\
# This represents force in free space, separated into\n\
# its linear and angular parts.\n\
Vector3  force\n\
Vector3  torque\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::ambf_msgs::ObjectState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ambf_msgs::ObjectState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sim_step);
      stream.next(m.name);
      stream.next(m.wall_time);
      stream.next(m.sim_time);
      stream.next(m.mass);
      stream.next(m.pInertia);
      stream.next(m.pose);
      stream.next(m.wrench);
      stream.next(m.userdata_description);
      stream.next(m.children_names);
      stream.next(m.joint_names);
      stream.next(m.userdata);
      stream.next(m.joint_positions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObjectState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ambf_msgs::ObjectState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ambf_msgs::ObjectState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sim_step: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sim_step);
    s << indent << "name: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.name);
    s << indent << "wall_time: ";
    Printer<float>::stream(s, indent + "  ", v.wall_time);
    s << indent << "sim_time: ";
    Printer<float>::stream(s, indent + "  ", v.sim_time);
    s << indent << "mass: ";
    Printer<float>::stream(s, indent + "  ", v.mass);
    s << indent << "pInertia: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pInertia);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "wrench: ";
    s << std::endl;
    Printer< ::geometry_msgs::Wrench_<ContainerAllocator> >::stream(s, indent + "  ", v.wrench);
    s << indent << "userdata_description: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.userdata_description);
    s << indent << "children_names[]" << std::endl;
    for (size_t i = 0; i < v.children_names.size(); ++i)
    {
      s << indent << "  children_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.children_names[i]);
    }
    s << indent << "joint_names[]" << std::endl;
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      s << indent << "  joint_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.joint_names[i]);
    }
    s << indent << "userdata[]" << std::endl;
    for (size_t i = 0; i < v.userdata.size(); ++i)
    {
      s << indent << "  userdata[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.userdata[i]);
    }
    s << indent << "joint_positions[]" << std::endl;
    for (size_t i = 0; i < v.joint_positions.size(); ++i)
    {
      s << indent << "  joint_positions[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_positions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMBF_MSGS_MESSAGE_OBJECTSTATE_H
