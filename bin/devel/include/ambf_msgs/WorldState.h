// Generated by gencpp from file ambf_msgs/WorldState.msg
// DO NOT EDIT!


#ifndef AMBF_MSGS_MESSAGE_WORLDSTATE_H
#define AMBF_MSGS_MESSAGE_WORLDSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace ambf_msgs
{
template <class ContainerAllocator>
struct WorldState_
{
  typedef WorldState_<ContainerAllocator> Type;

  WorldState_()
    : header()
    , dynamic_loop_freq(0)
    , n_devices(0)
    , sim_step(0)
    , wall_time(0.0)
    , sim_time(0.0)  {
    }
  WorldState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , dynamic_loop_freq(0)
    , n_devices(0)
    , sim_step(0)
    , wall_time(0.0)
    , sim_time(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint64_t _dynamic_loop_freq_type;
  _dynamic_loop_freq_type dynamic_loop_freq;

   typedef uint8_t _n_devices_type;
  _n_devices_type n_devices;

   typedef uint32_t _sim_step_type;
  _sim_step_type sim_step;

   typedef float _wall_time_type;
  _wall_time_type wall_time;

   typedef float _sim_time_type;
  _sim_time_type sim_time;





  typedef boost::shared_ptr< ::ambf_msgs::WorldState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ambf_msgs::WorldState_<ContainerAllocator> const> ConstPtr;

}; // struct WorldState_

typedef ::ambf_msgs::WorldState_<std::allocator<void> > WorldState;

typedef boost::shared_ptr< ::ambf_msgs::WorldState > WorldStatePtr;
typedef boost::shared_ptr< ::ambf_msgs::WorldState const> WorldStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ambf_msgs::WorldState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ambf_msgs::WorldState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ambf_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'ambf_msgs': ['/home/vidur/Desktop/ambf/ambf_ros_modules/ambf_msgs/msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ambf_msgs::WorldState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ambf_msgs::WorldState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ambf_msgs::WorldState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ambf_msgs::WorldState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ambf_msgs::WorldState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ambf_msgs::WorldState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ambf_msgs::WorldState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "19e71cae5899074bfba211b483c66a1f";
  }

  static const char* value(const ::ambf_msgs::WorldState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x19e71cae5899074bULL;
  static const uint64_t static_value2 = 0xfba211b483c66a1fULL;
};

template<class ContainerAllocator>
struct DataType< ::ambf_msgs::WorldState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ambf_msgs/WorldState";
  }

  static const char* value(const ::ambf_msgs::WorldState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ambf_msgs::WorldState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header  header\n\
uint64  dynamic_loop_freq\n\
uint8   n_devices\n\
uint32  sim_step\n\
float32 wall_time\n\
float32 sim_time\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
";
  }

  static const char* value(const ::ambf_msgs::WorldState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ambf_msgs::WorldState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.dynamic_loop_freq);
      stream.next(m.n_devices);
      stream.next(m.sim_step);
      stream.next(m.wall_time);
      stream.next(m.sim_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WorldState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ambf_msgs::WorldState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ambf_msgs::WorldState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "dynamic_loop_freq: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.dynamic_loop_freq);
    s << indent << "n_devices: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.n_devices);
    s << indent << "sim_step: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sim_step);
    s << indent << "wall_time: ";
    Printer<float>::stream(s, indent + "  ", v.wall_time);
    s << indent << "sim_time: ";
    Printer<float>::stream(s, indent + "  ", v.sim_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMBF_MSGS_MESSAGE_WORLDSTATE_H
