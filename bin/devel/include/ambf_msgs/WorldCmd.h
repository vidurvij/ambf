// Generated by gencpp from file ambf_msgs/WorldCmd.msg
// DO NOT EDIT!


#ifndef AMBF_MSGS_MESSAGE_WORLDCMD_H
#define AMBF_MSGS_MESSAGE_WORLDCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ambf_msgs
{
template <class ContainerAllocator>
struct WorldCmd_
{
  typedef WorldCmd_<ContainerAllocator> Type;

  WorldCmd_()
    : enable_step_throttling(false)
    , step_clock(false)
    , n_skip_steps(0)  {
    }
  WorldCmd_(const ContainerAllocator& _alloc)
    : enable_step_throttling(false)
    , step_clock(false)
    , n_skip_steps(0)  {
  (void)_alloc;
    }



   typedef uint8_t _enable_step_throttling_type;
  _enable_step_throttling_type enable_step_throttling;

   typedef uint8_t _step_clock_type;
  _step_clock_type step_clock;

   typedef uint8_t _n_skip_steps_type;
  _n_skip_steps_type n_skip_steps;





  typedef boost::shared_ptr< ::ambf_msgs::WorldCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ambf_msgs::WorldCmd_<ContainerAllocator> const> ConstPtr;

}; // struct WorldCmd_

typedef ::ambf_msgs::WorldCmd_<std::allocator<void> > WorldCmd;

typedef boost::shared_ptr< ::ambf_msgs::WorldCmd > WorldCmdPtr;
typedef boost::shared_ptr< ::ambf_msgs::WorldCmd const> WorldCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ambf_msgs::WorldCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ambf_msgs::WorldCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ambf_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'ambf_msgs': ['/home/vidur/Desktop/ambf/ambf_ros_modules/ambf_msgs/msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ambf_msgs::WorldCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ambf_msgs::WorldCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ambf_msgs::WorldCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ambf_msgs::WorldCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ambf_msgs::WorldCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ambf_msgs::WorldCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ambf_msgs::WorldCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6941ddbc8f8196cff4beb0278a6ad79d";
  }

  static const char* value(const ::ambf_msgs::WorldCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6941ddbc8f8196cfULL;
  static const uint64_t static_value2 = 0xf4beb0278a6ad79dULL;
};

template<class ContainerAllocator>
struct DataType< ::ambf_msgs::WorldCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ambf_msgs/WorldCmd";
  }

  static const char* value(const ::ambf_msgs::WorldCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ambf_msgs::WorldCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool enable_step_throttling\n\
bool step_clock\n\
uint8 n_skip_steps\n\
";
  }

  static const char* value(const ::ambf_msgs::WorldCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ambf_msgs::WorldCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable_step_throttling);
      stream.next(m.step_clock);
      stream.next(m.n_skip_steps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WorldCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ambf_msgs::WorldCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ambf_msgs::WorldCmd_<ContainerAllocator>& v)
  {
    s << indent << "enable_step_throttling: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_step_throttling);
    s << indent << "step_clock: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.step_clock);
    s << indent << "n_skip_steps: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.n_skip_steps);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AMBF_MSGS_MESSAGE_WORLDCMD_H
